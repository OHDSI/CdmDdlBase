progressBar = TRUE
)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
library(CdmDdlBase)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
## Run oracle ddl
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
##########################################################################
##### Postgres Testing
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
## Run postgres ddl
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove postgres tables
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
cdmVersionNum <- cdmVersion
cdmTableCsvLoc <- "inst/csv/OMOP_CDMv5.3.1_Table_Level.csv"
paste0('"',cdmVersion,'"')
library(CdmDdlBase)
s <- CdmDdlBase::createDdlFromFile(cdmTableCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Table_Level.csv",
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
## Run postgres ddl
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
library(CdmDdlBase)
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
cdmVersion <- "v5_3_1"
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
## Run postgres ddl
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
## Run postgres ddl
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
library(CdmDdlBase)
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = T)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo",
cleanUpScript = T)
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo",
cleanUpScript = T)
sqlServerConnect <- DatabaseConnector::createConnectionDetails(dbms = "sql server",
user = Sys.getenv("CDM5_SQL_SERVER_USER"),
password = Sys.getenv("CDM5_SQL_SERVER_PASSWORD"),
server = Sys.getenv("CDM5_SQL_SERVER_SERVER"),
schema = Sys.getenv("CDM5_SQL_SERVER_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = sqlServerConnect)
## Create sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v6_0",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
# Set fileName variable to the name of the cdm version or branch being downloaded
fileName <- "cdm_v_5_3_1_fixes"
# get the url for the zip CDM files. This could be for a release or for a branch
zipUrl <- "https://github.com/OHDSI/CommonDataModel/archive/v5.3.1_fixes.zip"
# download the zipped files
download.file(url = zipUrl,
destfile = paste0("inst/zip/", fileName ,".zip"))
# find the names of the csvs in the zipped file
zipped_csv_names <- grep('\\.csv$', unzip(paste0("inst/zip/", fileName ,".zip"), list=TRUE)$Name,
ignore.case=TRUE, value=TRUE)
# unzip only the csvs and put them in inst
unzip(paste0("inst/zip/", fileName ,".zip"), files=zipped_csv_names, exdir = "inst")
# paste the new csvs in the csv folder
zipFileList <- unzip(paste0("inst/zip/", fileName ,".zip"), list=TRUE)
folderName <- dplyr::filter(zipFileList, stringr::str_ends(Name, "/", negate = FALSE) & stringr::str_count(Name,"/") ==1)
newdir <- "inst/csv"
currentdir <- paste0("inst/",folderName$Name,"/")
listFiles <- list.files(currentdir)
file.copy(file.path(currentdir,listFiles), newdir, recursive = TRUE, overwrite = TRUE)
library(CdmDdlBase)
library(CdmDdlBase)
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain,
`FK Class` = fkClass
)
View(cdmSpecsClean)
View(tableSpecs)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
tb <- "PERSON"
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
View(loopTable)
tableInfo <- subset(tableSpecs, cdmTableName == tb)
View(tableInfo)
tableInfo[,"tableDescription"]
b
print(tableInfo[,"tableDescription"])
tables <- tableSpecs$cdmTableName[1,]
tables <- tableSpecs$cdmTableName[1]
cat(tableInfo[,"tableDescription"])
tables <- tableSpecs$cdmTableName[6]
tableInfo[,"userGuidance"]
tableInfo <- subset(tableSpecs, cdmTableName == tb)
tableInfo <- subset(tableSpecs, cdmTableName == tb)
tableInfo[,"userGuidance"]
tb <- "PROCEDURE_OCCURRENCE"
tableInfo <- subset(tableSpecs, cdmTableName == tb)
tableInfo[,"userGuidance"]
tableInfo[,"userGuidance"]==""
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"])
}
library(CdmDdlBase)
library(CdmDdlBase)
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain,
`FK Class` = fkClass
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
tableSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Table_Level.csv", stringsAsFactors = FALSE)
tableSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Table_Level.csv", stringsAsFactors = FALSE)
View(tableSpecs)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Field_Level.csv", stringsAsFactors = FALSE)
View(cdmSpecs)
library(CdmDdlBase)
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDM_Oncology_Ex_Field_Level.csv", stringsAsFactors = FALSE)
tb <- "EPISODE"
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain,
`FK Class` = fkClass
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html") %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:10, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
fileName <- "cdm_v_5_3_1_fixes"
# get the url for the zip CDM files. This could be for a release or for a branch
zipUrl <- "https://github.com/OHDSI/CommonDataModel/archive/v5.3.1_fixes.zip"
# download the zipped files
download.file(url = zipUrl,
destfile = paste0("inst/zip/", fileName ,".zip"))
# find the names of the csvs in the zipped file
zipped_csv_names <- grep('\\.csv$', unzip(paste0("inst/zip/", fileName ,".zip"), list=TRUE)$Name,
ignore.case=TRUE, value=TRUE)
# unzip only the csvs and put them in inst
unzip(paste0("inst/zip/", fileName ,".zip"), files=zipped_csv_names, exdir = "inst")
# paste the new csvs in the csv folder
zipFileList <- unzip(paste0("inst/zip/", fileName ,".zip"), list=TRUE)
folderName <- dplyr::filter(zipFileList, stringr::str_ends(Name, "/", negate = FALSE) & stringr::str_count(Name,"/") ==1)
newdir <- "inst/csv"
currentdir <- paste0("inst/",folderName$Name,"/")
listFiles <- list.files(currentdir)
file.copy(file.path(currentdir,listFiles), newdir, recursive = TRUE, overwrite = TRUE)
library(CdmDdlBase)
library(CdmDdlBase)
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv6.0_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv6.0_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$CDM_TABLE
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = CDM_TABLE,
`CDM Field` = CDM_FIELD,
`User Guide` = USER_GUIDANCE,
`ETL Conventions` = ETL_CONVENTIONS,
`Datatype` = CDM_DATATYPE,
`Required` = IS_REQUIRED,
`Primary Key` = IS_PRIMARY_KEY,
`Foreign Key (FK)` = IS_FOREIGN_KEY,
`FK Table` = FK_TABLE,
`FK Domain` = FK_DOMAIN
)
View(tableSpecs)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = CDM_TABLE,
`CDM Field` = CDM_FIELD,
`User Guide` = USER_GUIDANCE,
`ETL Conventions` = ETL_CONVENTIONS,
`Datatype` = CDM_DATATYPE,
`Required` = IS_REQUIRED,
`Primary Key` = IS_PRIMARY_KEY,
`Foreign Key (FK)` = IS_FOREIGN_KEY,
`FK Table` = FK_TABLE,
`FK Domain` = FK_DOMAIN
)
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html") %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
library(CdmDdlBase)
