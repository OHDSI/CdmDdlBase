install.packages("devtools")
devtools::install_github("OHDSI/DatabaseConnector")
devtools::install_github("OHDSI/SqlRender")
devtools::install_github("OHDSI/OhdsiRTools")
install.packages("rmarkdown")
library(DDLGeneratr)
writeDDL("postgresql")
install.packages("rJava")
writeDDL("postgresql")
library(DDLGeneratr)
writeDDL("postgresql")
sql <- SqlRender::loadRenderTranslateSql(sqlFilename = "OMOP CDM ddl.sql",
packageName = "DDLGeneratr",
dbms = targetdialect,
targetdialect = targetdialect)
devtools::install_github("OHDSI/SqlRender")
library(DDLGeneratr)
devtools::install_github("OHDSI/SqlRender")
library(DDLGeneratr)
devtools::install_github("OHDSI/SqlRender")
devtools::install_github("OHDSI/DatabaseConnector")
library("SqlRender")
library("DatabaseConnector")
cdmVersion <- "v5_3"
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeConstraints("oracle")
writeConstraints("postgresql")
writeConstraints("pdw")
writeConstraints("sql server")
writeDDL("bigquery")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeConstraints("oracle")
writeConstraints("postgresql")
writeConstraints("pdw")
writeConstraints("sql server")
cdmVersion <- "v5_3_1"
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
WikiParser(mdFilesLocation)
parseWiki(mdFilesLocation)
parseWiki(mdFilesLocation = mdFilesLocation)
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel/Documentation/CommonDataModel_Wiki_Files"
parseWiki(mdFilesLocation = mdFilesLocation)
files <- list.files(mdFilesLocation, pattern = ".*\\.md", recursive = TRUE, full.names = TRUE)
file <- files[10]
file
files
parseTableRow <- function(row) {
cells <- stringr::str_trim(stringr::str_split(row, "\\|")[[1]])
cells <- cells[2:5]
return(data.frame(field = tolower(cells[1]),
required = cells[2],
type = toupper(cells[3]),
description = cells[4]))
}
parseMdFile <- function(file) {
text <- readChar(file, file.info(file)$size)
lines <- stringr::str_split(text, "\n")[[1]]
lines <- stringr::str_trim(lines)
tableStart <- grep("\\s*field\\s*\\|\\s*required\\s*\\|\\s*type\\s*\\|\\s*description\\s*", tolower(lines))
if (length(tableStart) > 1)
stop("More than one table definition found in ", file)
if (length(tableStart) == 1) {
tableName <- basename(file)
tableName <- tolower(stringr::str_sub(tableName, 1, -4))
writeLines(paste("Parsing table", tableName))
tableStart <- tableStart + 2
tableEnd <- which(lines == "")
tableEnd <- min(tableEnd[tableEnd > tableStart]) - 1
tableDefinition <- lapply(lines[tableStart:tableEnd], parseTableRow)
tableDefinition <- do.call(rbind, tableDefinition)
tableDefinition$table <- tableName
return(tableDefinition)
} else {
return(NULL)
}
}
tableDefinitions <- lapply(files, parseMdFile)
tableDefinitions <- do.call(rbind, tableDefinitions)
tableDefinitions
text <- readChar(file, file.info(file)$size)
lines <- stringr::str_split(text, "\n")[[1]]
lines <- stringr::str_trim(lines)
tableStart <- grep("\\s*field\\s*\\|\\s*required\\s*\\|\\s*type\\s*\\|\\s*description\\s*", tolower(lines))
if (length(tableStart) > 1)
stop("More than one table definition found in ", file)
tableName <- basename(file)
tableName <- tolower(stringr::str_sub(tableName, 1, -4))
writeLines(paste("Parsing table", tableName))
tableStart <- tableStart + 2
tableEnd <- which(lines == "")
tableEnd <- min(tableEnd[tableEnd > tableStart]) - 1
tableDefinition <- lapply(lines[tableStart:tableEnd], parseTableRow)
tableDefinition <- do.call(rbind, tableDefinition)
tableDefinition$table <- tableName
tableDefinition
View(tableDefinition)
View(tableDefinitions)
View(tableDefinitions)
library(DDLGeneratr)
cdmVersion <- "v6_0"
# Step 1.2: The location of the wiki markdown files. The default is "../../Documentation/CommonDataModel_Wiki_Files"
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel_v6/Documentation/CommonDataModel_Wiki_Files"
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
H
parseWiki(mdFilesLocation = mdFilesLocation,
output_file = paste0("OMOP_CDM_",cdmVersion,".csv"))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
cdmVersion <- "v6_0"
# Step 1.2: The location of the wiki markdown files. The default is "../../Documentation/CommonDataModel_Wiki_Files"
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel_v6/Documentation/CommonDataModel_Wiki_Files"
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
