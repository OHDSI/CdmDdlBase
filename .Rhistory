## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
cdmVersion <- "v5_3_1"
# Step 3: After creating the csv files for the new version, create the sql server DDL from the file
s <- CdmDdlBase::createDdlFromFile(cdmTableCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Table_Level.csv",
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
# Step 3.1: Create the primary key constraints for the new version
p <- CdmDdlBase::createPkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
# Step 3.2: Create the foreign key constraints for the new version
f <- CdmDdlBase::createFkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "bigquery",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "impala",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "netezza",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "pdw",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "redshift",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writePrimaryKeys(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "netezza",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writeConstraints("oracle",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("postgresql",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("sql server",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("pdw",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeIndex("oracle", ### NOTE: ORACLE CREATES AUTO INDEXING AND NEED TO UPDATE INST/INDEX FILE TO REPRESENT IT
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("postgresql",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("sql server",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("pdw",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
library(CdmDdlBase)
cdmVersion <- "v6_0"
# Step 3: After creating the csv files for the new version, create the sql server DDL from the file
s <- CdmDdlBase::createDdlFromFile(cdmTableCsvLoc = "inst/csv/OMOP_CDMv6.0_Table_Level.csv",
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
# Step 3.1: Create the primary key constraints for the new version
p <- CdmDdlBase::createPkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
# Step 3.2: Create the foreign key constraints for the new version
f <- CdmDdlBase::createFkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo",
cleanUpScript = F) #This needs to be updated manually right now
writePrimaryKeys(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI")
writePrimaryKeys(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi")
writePrimaryKeys(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo")
writeConstraints("oracle",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"OHDSI")
writeConstraints("postgresql",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"ohdsi")
writeConstraints("sql server",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"ohdsi.dbo")
writeIndex("oracle", ### NOTE: ORACLE CREATES AUTO INDEXING AND NEED TO UPDATE INST/INDEX FILE TO REPRESENT IT
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"OHDSI")
writeIndex("postgresql",
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"ohdsi")
writeIndex("sql server",
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"ohdsi.dbo")
##### Sql Server Testing
sqlServerConnect <- DatabaseConnector::createConnectionDetails(dbms = "sql server",
user = Sys.getenv("CDM5_SQL_SERVER_USER"),
password = Sys.getenv("CDM5_SQL_SERVER_PASSWORD"),
server = Sys.getenv("CDM5_SQL_SERVER_SERVER"),
schema = Sys.getenv("CDM5_SQL_SERVER_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = sqlServerConnect)
## Create sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server primary keys and indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server constraints
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," indices.sql"))
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v6_0",".sql"))
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v6_0",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
install.packages("rmarkdown")
install.packages("kable")
install.packages("kableExtra")
devtools::install_github("haozhu233/kableExtra")
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
View(tableSpecs)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
if(tb == 'PERSON'){
cat("## **Clinical Data Tables**\n\n")
}
if(tb == 'LOCATION'){
cat("## **Health System Data Tables**\n\n")
}
if(tb == 'PAYER_PLAN_PERIOD'){
cat("## **Health Economics Data Tables**\n\n")
}
if(tb == 'DRUG_ERA'){
cat("## **Standardized Derived Elements**\n\n")
}
if(tb == 'METADATA'){
cat("## **Metadata Tables**\n\n")
}
if(tb == 'CONCEPT'){
cat("## **Vocabulary Tables**\n\n")
}
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html", escape = FALSE) %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
View(loopTable)
loopTable <- subset(loopTable, select = -c(1))
View(loopTable)
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
View(tableSpecs)
View(loopTable)
loopTable <- subset(loopTable, select = -c(1))
install.packages("kable", force=T)
install.packages("knitr")
devtools::install_github("haozhu233/kableExtra", ref = "1.0.1")
install.packages("https://cran.r-project.org/src/contrib/Archive/kableExtra/kableExtra_1.0.1.tar.gz", repos=NULL, type = "source")
install.packages("readr")
install.packages("https://cran.r-project.org/src/contrib/Archive/kableExtra/kableExtra_1.0.1.tar.gz", repos=NULL, type = "source")
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
if(tb == 'PERSON'){
cat("## **Clinical Data Tables**\n\n")
}
if(tb == 'LOCATION'){
cat("## **Health System Data Tables**\n\n")
}
if(tb == 'PAYER_PLAN_PERIOD'){
cat("## **Health Economics Data Tables**\n\n")
}
if(tb == 'DRUG_ERA'){
cat("## **Standardized Derived Elements**\n\n")
}
if(tb == 'METADATA'){
cat("## **Metadata Tables**\n\n")
}
if(tb == 'CONCEPT'){
cat("## **Vocabulary Tables**\n\n")
}
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html", escape = FALSE) %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
tb = "PERSON"
tb <- 'PERSON'
tableInfo <- subset(tableSpecs, cdmTableName == tb)
View(tableInfo)
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
View(loopTable)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html", escape = FALSE) %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
if(tb == 'PERSON'){
cat("## **Clinical Data Tables**\n\n")
}
if(tb == 'LOCATION'){
cat("## **Health System Data Tables**\n\n")
}
if(tb == 'PAYER_PLAN_PERIOD'){
cat("## **Health Economics Data Tables**\n\n")
}
if(tb == 'DRUG_ERA'){
cat("## **Standardized Derived Elements**\n\n")
}
if(tb == 'METADATA'){
cat("## **Metadata Tables**\n\n")
}
if(tb == 'CONCEPT'){
cat("## **Vocabulary Tables**\n\n")
}
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html", escape = FALSE) %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
tables
View(loopTable)
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
tableSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Table_Level.csv", stringsAsFactors = FALSE)
cdmSpecs <- read.csv("../inst/csv/OMOP_CDMv5.3.1_Field_Level.csv", stringsAsFactors = FALSE)
tables <- tableSpecs$cdmTableName
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = cdmTableName,
`CDM Field` = cdmFieldName,
`User Guide` = userGuidance,
`ETL Conventions` = etlConventions,
`Datatype` = cdmDatatype,
`Required` = isRequired,
`Primary Key` = isPrimaryKey,
`Foreign Key` = isForeignKey,
`FK Table` = fkTableName,
`FK Domain` = fkDomain
)
cdmSpecsClean[is.na(cdmSpecsClean)] <- ""
for(tb in tables) {
if(tb == 'PERSON'){
cat("## **Clinical Data Tables**\n\n")
}
if(tb == 'LOCATION'){
cat("## **Health System Data Tables**\n\n")
}
if(tb == 'PAYER_PLAN_PERIOD'){
cat("## **Health Economics Data Tables**\n\n")
}
if(tb == 'DRUG_ERA'){
cat("## **Standardized Derived Elements**\n\n")
}
if(tb == 'METADATA'){
cat("## **Metadata Tables**\n\n")
}
if(tb == 'CONCEPT'){
cat("## **Vocabulary Tables**\n\n")
}
cat("###", tb, "{.tabset .tabset-pills} \n\n")
tableInfo <- subset(tableSpecs, cdmTableName == tb)
cat("**Table Description**\n\n",tableInfo[,"tableDescription"], "\n\n")
if(!isTRUE(tableInfo[,"userGuidance"]=="")){
cat("**User Guide**\n\n",tableInfo[,"userGuidance"],"\n\n")
}
if(!isTRUE(tableInfo[,"etlConventions"]=="")){
cat("**ETL Conventions**\n\n",tableInfo[,"etlConventions"],"\n\n")
}
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
print(kable(x = loopTable, align = "l", row.names = FALSE, format = "html", escape = FALSE) %>%
column_spec(1, bold = T) %>%
column_spec(2, width = "3in", include_thead = T) %>%
column_spec(3, width = "4in", include_thead = T) %>%
column_spec(4:9, width = "1in", include_thead = T) %>%
kable_styling(c("condensed","hover"), position = "center", full_width = T, font_size = 13))
}
