install.packages("devtools")
devtools::install_github("OHDSI/DatabaseConnector")
devtools::install_github("OHDSI/SqlRender")
devtools::install_github("OHDSI/OhdsiRTools")
install.packages("rmarkdown")
library(DDLGeneratr)
writeDDL("postgresql")
install.packages("rJava")
writeDDL("postgresql")
library(DDLGeneratr)
writeDDL("postgresql")
sql <- SqlRender::loadRenderTranslateSql(sqlFilename = "OMOP CDM ddl.sql",
packageName = "DDLGeneratr",
dbms = targetdialect,
targetdialect = targetdialect)
devtools::install_github("OHDSI/SqlRender")
library(DDLGeneratr)
devtools::install_github("OHDSI/SqlRender")
library(DDLGeneratr)
devtools::install_github("OHDSI/SqlRender")
devtools::install_github("OHDSI/DatabaseConnector")
library("SqlRender")
library("DatabaseConnector")
cdmVersion <- "v5_3"
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeConstraints("oracle")
writeConstraints("postgresql")
writeConstraints("pdw")
writeConstraints("sql server")
writeDDL("bigquery")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeConstraints("oracle")
writeConstraints("postgresql")
writeConstraints("pdw")
writeConstraints("sql server")
cdmVersion <- "v5_3_1"
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
library(DDLGeneratr)
writeDDL("bigquery")
writeDDL("impala")
writeDDL("netezza")
writeDDL("oracle")
writeDDL("pdw")
writeDDL("postgresql")
writeDDL("redshift")
writeDDL("sql server")
WikiParser(mdFilesLocation)
parseWiki(mdFilesLocation)
parseWiki(mdFilesLocation = mdFilesLocation)
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel/Documentation/CommonDataModel_Wiki_Files"
parseWiki(mdFilesLocation = mdFilesLocation)
files <- list.files(mdFilesLocation, pattern = ".*\\.md", recursive = TRUE, full.names = TRUE)
file <- files[10]
file
files
parseTableRow <- function(row) {
cells <- stringr::str_trim(stringr::str_split(row, "\\|")[[1]])
cells <- cells[2:5]
return(data.frame(field = tolower(cells[1]),
required = cells[2],
type = toupper(cells[3]),
description = cells[4]))
}
parseMdFile <- function(file) {
text <- readChar(file, file.info(file)$size)
lines <- stringr::str_split(text, "\n")[[1]]
lines <- stringr::str_trim(lines)
tableStart <- grep("\\s*field\\s*\\|\\s*required\\s*\\|\\s*type\\s*\\|\\s*description\\s*", tolower(lines))
if (length(tableStart) > 1)
stop("More than one table definition found in ", file)
if (length(tableStart) == 1) {
tableName <- basename(file)
tableName <- tolower(stringr::str_sub(tableName, 1, -4))
writeLines(paste("Parsing table", tableName))
tableStart <- tableStart + 2
tableEnd <- which(lines == "")
tableEnd <- min(tableEnd[tableEnd > tableStart]) - 1
tableDefinition <- lapply(lines[tableStart:tableEnd], parseTableRow)
tableDefinition <- do.call(rbind, tableDefinition)
tableDefinition$table <- tableName
return(tableDefinition)
} else {
return(NULL)
}
}
tableDefinitions <- lapply(files, parseMdFile)
tableDefinitions <- do.call(rbind, tableDefinitions)
tableDefinitions
text <- readChar(file, file.info(file)$size)
lines <- stringr::str_split(text, "\n")[[1]]
lines <- stringr::str_trim(lines)
tableStart <- grep("\\s*field\\s*\\|\\s*required\\s*\\|\\s*type\\s*\\|\\s*description\\s*", tolower(lines))
if (length(tableStart) > 1)
stop("More than one table definition found in ", file)
tableName <- basename(file)
tableName <- tolower(stringr::str_sub(tableName, 1, -4))
writeLines(paste("Parsing table", tableName))
tableStart <- tableStart + 2
tableEnd <- which(lines == "")
tableEnd <- min(tableEnd[tableEnd > tableStart]) - 1
tableDefinition <- lapply(lines[tableStart:tableEnd], parseTableRow)
tableDefinition <- do.call(rbind, tableDefinition)
tableDefinition$table <- tableName
tableDefinition
View(tableDefinition)
View(tableDefinitions)
View(tableDefinitions)
library(DDLGeneratr)
cdmVersion <- "v6_0"
# Step 1.2: The location of the wiki markdown files. The default is "../../Documentation/CommonDataModel_Wiki_Files"
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel_v6/Documentation/CommonDataModel_Wiki_Files"
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
H
parseWiki(mdFilesLocation = mdFilesLocation,
output_file = paste0("OMOP_CDM_",cdmVersion,".csv"))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
cdmVersion <- "v6_0"
# Step 1.2: The location of the wiki markdown files. The default is "../../Documentation/CommonDataModel_Wiki_Files"
mdFilesLocation <- "S:/Git/GitHub/CommonDataModel_v6/Documentation/CommonDataModel_Wiki_Files"
rmarkdown::render("reports/OMOP_CDM_PDF.Rmd",
output_format = "pdf_document",
output_file = paste0("OMOP_CDM_",cdmVersion,".pdf"),
params = list(mdFilesLocation = mdFilesLocation))
library(DDLGeneratr)
library(DatabaseConnector)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", cdmVersion,".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
# Step 1.1: The version of the CDM you are writing. This will be used for the name of the pdf so, for example, write v5.3 as v5_3
cdmVersion <- "v6_0"
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", cdmVersion,".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
library(DatabaseConnector)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", cdmVersion,".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
library(DDLGeneratr)
writeDDL("oracle",
cdmVersion,
"OHDSI")
library(DatabaseConnector)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
library(DDLGeneratr)
library(DatabaseConnector)
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", cdmVersion,".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
writeDDL("oracle",
cdmVersion,
"OHDSI")
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", cdmVersion,".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
install.packages("readxl")
cat("##", tb)
cat("##", "PERSON")
print(cat("##", tb))
print(cat("##", tables[[1]]))
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("../docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "TABLE LEVEL")
tables <- tableSpecs$CDM_TABLE
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "FIELD LEVEL")
cdmSpecs <- readxl::read_excel("docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "TABLE LEVEL")
tables <- tableSpecs$CDM_TABLE
print(cat("##", tables[[1]]))
tables[[1]]
print(paste("##", tables[[1]]))
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("../docs/OMOP CDMv5.3.1 Specs v0.1.xlsx", sheet = "TABLE LEVEL")
tables <- tableSpecs$CDM_TABLE
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = CDM_TABLE,
`CDM Field` = CDM_FIELD,
`User Guide` = USER_GUIDANCE,
`ETL Conventions` = ETL_CONVENTIONS,
`Datatype` = CDM_DATATYPE,
`Is Required` = IS_REQUIRED,
`Is Primary Key` = IS_PRIMARY_KEY,
`Is Foreign Key (FK)` = IS_FOREIGN_KEY,
`FK Table` = FK_TABLE,
`FK Domain` = FK_DOMAIN,
`FK Class` = FK_CLASS
)
for(tb in tables) {
print(cat("##", tb, "\n\n"))
loopTable <- subset(cdmSpecsClean, `CDM Table` == tb)
print(kable(x = loopTable, align = "l", row.names = FALSE) %>% kable_styling())
}
print(cat("##", tb, "\n\n"))
tb$
tables[[1]]
print(cat("##", tb))
tb
paste(tb,"/n")
print(cat("##", cat(tb,"/n")))
print(cat("##", tb,"/n"))
paste("##", tb)
print(paste("##", tb))
section <- cat("##", tb)
print(section)
print(section)
section <- cat("##", tb)
print(section)
library(stringr)
?stringr
section <- paste("##", tb)
section
section <- stringr::str_remove(section, "[1]")
section
str_locate(section,"[1]")
str_locate(section,"V")
section <- print(paste("##", tb))
section <- print(cat("##", tb))
section <- stringr::str_remove(section, "NULL")
SECTION
section
print(section)
section <- print(cat("##", tb))
str_remove(print(cat("##", tb)),"NULL")
section <- cat("##", tb)
section
print("##", tb)
print("##")
loopTable <- subset(cdmSpecsClean, select = -c(`CDM_TABLE), `CDM Table` == tb)
loopTable <- subset(loopTable, select = -c(1))
View(loopTable)
View(tableSpecs)
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("../docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "TABLE LEVEL")
tables <- tableSpecs$CDM_TABLE
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("../docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "TABLE LEVEL")
cdmSpecs <- readxl::read_excel("../docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "FIELD LEVEL")
cdmSpecs <- readxl::read_excel("C:/Git/Github/DDLgeneratr_OHDSI/docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "FIELD LEVEL")
#todo figure out how to get the document dynamically without specifying the name
library(rmarkdown)
library(knitr)
library(kableExtra)
library(magrittr)
library(dplyr)
library(stringr)
cdmSpecs <- readxl::read_excel("C:/Git/Github/DDLgeneratr_OHDSI/docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "FIELD LEVEL")
tableSpecs <- readxl::read_excel("C:/Git/Github/DDLgeneratr_OHDSI/docs/OMOP CDMv6 DQ Checks v0.1.xlsx", sheet = "TABLE LEVEL")
tables <- tableSpecs$CDM_TABLE
cdmSpecsClean <- cdmSpecs %>%
dplyr::select(`CDM Table` = CDM_TABLE,
`CDM Field` = CDM_FIELD,
`User Guide` = USER_GUIDANCE,
`ETL Conventions` = ETL_CONVENTIONS,
`Datatype` = CDM_DATATYPE,
`Is Required` = IS_REQUIRED,
`Is Primary Key` = IS_PRIMARY_KEY,
`Is Foreign Key (FK)` = IS_FOREIGN_KEY,
`FK Table` = FK_TABLE,
`FK Domain` = FK_DOMAIN,
`FK Class` = FK_CLASS
)
View(cdmSpecs)
