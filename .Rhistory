## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle ddl
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle primary keys
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle constraints
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeIndex("oracle",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"OHDSI")
##### Oracle Testing
oracleConnect <- DatabaseConnector::createConnectionDetails(dbms = "oracle",
user = Sys.getenv("CDM5_ORACLE_USER"),
password = Sys.getenv("CDM5_ORACLE_PASSWORD"),
server = Sys.getenv("CDM5_ORACLE_SERVER"),
schema = Sys.getenv("CDM5_ORACLE_CDM_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = oracleConnect)
## Run oracle ddl
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle primary keys
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle constraints
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle ddl
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle primary keys
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle constraints
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle ddl
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle primary keys
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle constraints
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run oracle indices
sql <- SqlRender::readSql(paste0("output/oracle/OMOP CDM oracle ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove oracle tables
sql <- SqlRender::readSql(paste0("output/oracle/oracle testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
writeIndex("postgresql",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"ohdsi")
writeIndex("sql server",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"ohdsi.dbo")
##########################################################################
##### Postgres Testing
postgresConnect <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM5_POSTGRESQL_USER"),
password = Sys.getenv("CDM5_POSTGRESQL_PASSWORD"),
server = Sys.getenv("CDM5_POSTGRESQL_SERVER"),
schema = Sys.getenv("CDM5_POSTGRESQL_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = postgresConnect)
## Run postgres ddl
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run postgres primary keys
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run postgres constraints
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run postgres indices
sql <- SqlRender::readSql(paste0("output/postgresql/OMOP CDM postgresql ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove postgres tables
sql <- SqlRender::readSql(paste0("output/postgresql/postgresql testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
##### Sql Server Testing
sqlServerConnect <- DatabaseConnector::createConnectionDetails(dbms = "sql server",
user = Sys.getenv("CDM5_SQL_SERVER_USER"),
password = Sys.getenv("CDM5_SQL_SERVER_PASSWORD"),
server = Sys.getenv("CDM5_SQL_SERVER_SERVER"),
schema = Sys.getenv("CDM5_SQL_SERVER_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = sqlServerConnect)
## Create sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server primary keys and indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server constraints
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," indices.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
DatabaseConnector::disconnect(conn)
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
cdmVersion <- "v5_3_1"
# Step 3: After creating the csv files for the new version, create the sql server DDL from the file
s <- CdmDdlBase::createDdlFromFile(cdmTableCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Table_Level.csv",
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
# Step 3.1: Create the primary key constraints for the new version
p <- CdmDdlBase::createPkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
# Step 3.2: Create the foreign key constraints for the new version
f <- CdmDdlBase::createFkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv5.3.1_Field_Level.csv")
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "bigquery",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "impala",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "netezza",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "pdw",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writeDDL(targetdialect = "redshift",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema",
cleanUpScript = F)
writePrimaryKeys(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writePrimaryKeys(targetdialect = "netezza",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "@cdmDatabaseSchema")
writeConstraints("oracle",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("postgresql",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("sql server",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeConstraints("pdw",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"@cdmDatabaseSchema")
writeIndex("oracle", ### NOTE: ORACLE CREATES AUTO INDEXING AND NEED TO UPDATE INST/INDEX FILE TO REPRESENT IT
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("postgresql",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("sql server",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
writeIndex("pdw",
cdmVersion,
sqlFilename = "OMOP CDM indices v5_3_1.sql",
"@cdmDatabaseSchema")
library(CdmDdlBase)
cdmVersion <- "v6_0"
# Step 3: After creating the csv files for the new version, create the sql server DDL from the file
s <- CdmDdlBase::createDdlFromFile(cdmTableCsvLoc = "inst/csv/OMOP_CDMv6.0_Table_Level.csv",
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
# Step 3.1: Create the primary key constraints for the new version
p <- CdmDdlBase::createPkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
# Step 3.2: Create the foreign key constraints for the new version
f <- CdmDdlBase::createFkFromFile(cdmVersionNum = cdmVersion,
cdmFieldCsvLoc = "inst/csv/OMOP_CDMv6.0_Field_Level.csv")
writeDDL(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI",
cleanUpScript = F) #oracle syntax for removing tables is weird, set this to F and make any changes to the raw file
writeDDL(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi",
cleanUpScript = F) #This needs to be updated manually right now
writeDDL(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM ddl ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo",
cleanUpScript = F) #This needs to be updated manually right now
writePrimaryKeys(targetdialect = "oracle",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "OHDSI")
writePrimaryKeys(targetdialect = "postgresql",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi")
writePrimaryKeys(targetdialect = "sql server",
cdmVersion = cdmVersion,
sqlFilename = paste0("OMOP CDM pk ", cdmVersion, " ", Sys.Date(), ".sql"),
cdmDatabaseSchema = "ohdsi.dbo")
writeConstraints("oracle",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"OHDSI")
writeConstraints("postgresql",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"ohdsi")
writeConstraints("sql server",
cdmVersion,
sqlFileName = paste0("OMOP CDM fk ", cdmVersion, " ", Sys.Date(), ".sql"),
"ohdsi.dbo")
writeIndex("oracle", ### NOTE: ORACLE CREATES AUTO INDEXING AND NEED TO UPDATE INST/INDEX FILE TO REPRESENT IT
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"OHDSI")
writeIndex("postgresql",
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"ohdsi")
writeIndex("sql server",
cdmVersion,
sqlFilename = "OMOP CDM indices v6_0.sql",
"ohdsi.dbo")
##### Sql Server Testing
sqlServerConnect <- DatabaseConnector::createConnectionDetails(dbms = "sql server",
user = Sys.getenv("CDM5_SQL_SERVER_USER"),
password = Sys.getenv("CDM5_SQL_SERVER_PASSWORD"),
server = Sys.getenv("CDM5_SQL_SERVER_SERVER"),
schema = Sys.getenv("CDM5_SQL_SERVER_OHDSI_SCHEMA"))
conn <- DatabaseConnector::connect(connectionDetails = sqlServerConnect)
## Create sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," ddl.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server primary keys and indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," primary keys.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server constraints
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," constraints.sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Run sql server indices
sql <- SqlRender::readSql(paste0("output/sql server/OMOP CDM sql server ", cdmVersion," indices.sql"))
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v5_3_1",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v6_0",".sql"))
## Remove sql server tables
sql <- SqlRender::readSql(paste0("output/sql server/sql server testCleanUp ", "v6_0",".sql"))
DatabaseConnector::executeSql(connection = conn,
sql = sql,
progressBar = TRUE
)
